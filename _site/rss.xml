<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>LeftTree&#39;s Blog</title>
        <description>LeftTree&#39;s Blog - Xiang Li</description>
        <link>http://lefttree.github.io</link>
        <atom:link href="http://lefttree.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Sat, 20 Jun 2015 23:05:32 -0700</lastBuildDate>
        <pubDate>Sat, 20 Jun 2015 23:05:32 -0700</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Git Workflow</title>
                <description>&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#current-work-flow&quot;&gt;Current Work Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#centralized-workflow&quot;&gt;Centralized Workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#feature-branch-workflow&quot;&gt;Feature Branch Workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gitflow-workflow&quot;&gt;Gitflow Workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#forking-workflow&quot;&gt;Forking Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;current-work-flow&quot;&gt;Current Work Flow&lt;/h1&gt;

&lt;p&gt;Usually in my work, I use git commands like
&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;checkout --&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;pull&lt;/code&gt;/&lt;code&gt;push&lt;/code&gt;,
……&lt;/p&gt;

&lt;p&gt;Work routine is 
    * pull from remote origin
    * create new branch, develop new stuff
    * push branch to remote origin 
    * code review, and merge branch to master branch on origin&lt;/p&gt;

&lt;p&gt;Local
    * create new branch
    * develop weird things lol
    * test, stash, commit
    * rebase, combine commits into one
    * merge to master&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content&lt;/h1&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/lefttree/my-git/blob/master/git-workflow-tutorial.md&quot;&gt;xirong’s post&lt;/a&gt;, learnt some standard git workflows.
&amp;gt;This won’t state all the steps here, I wrote this post  for remembering these stuff, so I assume the reader already know git. 
&amp;gt;If you need to learn the details, please go to the original post&lt;/p&gt;

&lt;h2 id=&quot;centralized-workflow&quot;&gt;Centralized Workflow&lt;/h2&gt;

&lt;h4 id=&quot;init&quot;&gt;Init&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git init --bare /path/to/repo.git&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;–bare 
repo.git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;local&quot;&gt;Local&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git pull --rebase origin master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix conflicts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git add &amp;lt;some-file&amp;gt; 
git rebase --continue
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If encountered problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rebase --abort&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;after all done&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;feature-branch-workflow&quot;&gt;Feature Branch Workflow&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pull request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once someone completes a feature, they don’t immediately merge it into master. Instead, they push the feature branch to the central server and file a pull request asking to merge their additions into master. This gives other developers an opportunity to review the changes before they become a part of the main codebase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code review&lt;/strong&gt; is a major benefit of pull requests, but they’re actually designed to be a generic way to talk about code. You can think of pull requests as a discussion dedicated to a particular branch.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Start a new branch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push to central repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin marys-feature&lt;/code&gt;
&amp;gt;-u adds it as a remote tracking branch, you can just do &lt;code&gt;git push&lt;/code&gt; later&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pull request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send a pull request in Git GUI&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comment, Change&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;all on the new branch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;publish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git checkout master
git pull
git pull origin feature-branch
git push
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;gitflow-workflow&quot;&gt;Gitflow Workflow&lt;/h2&gt;

&lt;h4 id=&quot;historical-branches&quot;&gt;Historical Branches&lt;/h4&gt;

&lt;p&gt;Instead of a single master branch, this workflow uses two branches to record the history of the project. The master branch stores the official release history, and the develop branch serves as an integration branch for features. It’s also convenient to &lt;strong&gt;tag&lt;/strong&gt; all commits in the master branch with a version number.&lt;/p&gt;

&lt;h4 id=&quot;feature-branches&quot;&gt;Feature Branches&lt;/h4&gt;

&lt;p&gt;feature branches use &lt;em&gt;develop&lt;/em&gt; as their parent branch. When a feature is complete, it gets merged back into develop. &lt;strong&gt;Features should never interact directly with master.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;release-branches&quot;&gt;Release Branches&lt;/h4&gt;

&lt;p&gt;Once develop has acquired enough features for a release (or a predetermined release date is approaching), you fork a release branch off of &lt;code&gt;develop&lt;/code&gt;. Creating this branch starts the next release cycle, so no new features can be added after this point—only bug fixes, documentation generation, and other release-oriented tasks should go in this branch.&lt;/p&gt;

&lt;p&gt;Once it’s ready to ship, the release gets &lt;code&gt;merged into master&lt;/code&gt; and &lt;code&gt;tagged with a version number&lt;/code&gt;. In addition, it should be &lt;code&gt;merged back into develop&lt;/code&gt;, which may have progressed since the release was initiated.&lt;/p&gt;

&lt;h4 id=&quot;hotfix-branch&quot;&gt;Hotfix Branch&lt;/h4&gt;

&lt;p&gt;bug fix, branch off &lt;code&gt;master&lt;/code&gt;, merged back to &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git checkout -b new-feature develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;after done&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git pull origin develop
git checkout develop
git merge some-feature
git push
git branch -d some-feature
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;prepare release&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b release-0.1 develop&lt;/code&gt;
This branch is a place to clean up the release, test everything, update the documentation, and do any other kind of preparation for the upcoming release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;after release is ready&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git checkout master
git merge release-0.1
git push
git checkout develop
git merge release-0.1
git push
git branch -d release-0.1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;whenever you merge something into master, should tag it
&lt;code&gt;git tag -a 0.1 -m &quot;Initial public release&quot; master
git push --tags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bug fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git checkout -b issue-#001 master
# Fix the bug
git checkout master
git merge issue-#001
git push
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;forking-workflow&quot;&gt;Forking Workflow&lt;/h2&gt;

&lt;p&gt;The main advantage of the Forking Workflow is that contributions can be integrated without the need for everybody to push to a single central repository.&lt;/p&gt;

&lt;p&gt;When they’re ready to publish a local commit, they push the commit to their own public repository—not the official one. Then, they file a pull request with the main repository, which lets the project maintainer know that an update is ready to be integrated. The pull request also serves as a convenient discussion thread if there are issues with the contributed code.&lt;/p&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Fork, clone to local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://user@bitbucket.org/user/repo.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whereas the other workflows in this tutorial use a single origin remote that points to the central repository, the Forking Workflow requires two remotes—one for the official repository, and one for the developer’s personal server-side repository.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add upstream https://bitbucket.org/maintainer/repo
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work on personal features, push to personal remote&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pull Request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintainer integrates their features&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inspect the code directly in the pull request&lt;/li&gt;
  &lt;li&gt;Pull the code into their local repository and manually merge it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
git fetch https://bitbucket.org/user/repo feature-branch
# Inspect the changes
git checkout master
git merge FETCH_HEAD
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintainer push to public origin&lt;/strong&gt;&lt;/p&gt;

</description>
                <link>http://lefttree.github.io/programming%20style/2015/06/18/git-workflow</link>
                <guid>http://lefttree.github.io/programming%20style/2015/06/18/git-workflow</guid>
                <pubDate>Thu, 18 Jun 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>React Two-way Binding</title>
                <description>&lt;h4 id=&quot;input&quot;&gt;input&lt;/h4&gt;

&lt;p&gt;valueLink&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var WithLink = React.createClass({
  mixins: [React.addons.LinkedStateMixin],
  getInitialState: function() {
    return {message: &#39;Hello!&#39;};
  },
  render: function() {
    return &amp;lt;input type=&quot;text&quot; valueLink={this.linkState(&#39;message&#39;)} /&amp;gt;;
  }
});
&lt;/code&gt;
&amp;gt; need to include react-with-addons.js&lt;/p&gt;

&lt;p&gt;without valueLink&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var WithoutLink = React.createClass({
  mixins: [React.addons.LinkedStateMixin],
  getInitialState: function() {
    return {message: &#39;Hello!&#39;};
  },
  render: function() {
    var valueLink = this.linkState(&#39;message&#39;);
    var handleChange = function(e) {
      valueLink.requestChange(e.target.value);
    };
    return &amp;lt;input type=&quot;text&quot; value={valueLink.value} onChange={handleChange} /&amp;gt;;
  }
});
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;select&quot;&gt;select&lt;/h4&gt;

&lt;p&gt;no valueLink, use value and onchange event&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;lt;select text=&quot;Bandwidth&quot; value={this.state.bw} changeE={this.bwChange}/&amp;gt;
&lt;/code&gt;&lt;/p&gt;

</description>
                <link>http://lefttree.github.io/frontend/2015/06/12/react-twoway-binding</link>
                <guid>http://lefttree.github.io/frontend/2015/06/12/react-twoway-binding</guid>
                <pubDate>Fri, 12 Jun 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>Gulp Setup</title>
                <description>&lt;p&gt;&lt;code&gt;sudo npm install -g gulp   &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;under the development dir
&lt;code&gt;npm install --save-dev gulp   &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--save-dev&lt;/code&gt; tells npm to add this module into package.json&lt;/p&gt;

&lt;p&gt;install plugins&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install gulp-jshint gulp-sass gulp-concat gulp-uglify gulp-renam --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;example gulpfile.js&lt;/p&gt;

&lt;p&gt;```
//require gulp &lt;br /&gt;
var gulp = require(‘gulp’);  &lt;/p&gt;

&lt;p&gt;//require plugins&lt;br /&gt;
var jshint = require(‘gulp-jshint’);
var sass = require(‘gulp-sass’);
var concat = require(‘gulp-concat’);
var uglify = require(‘gulp-uglify’);
var rename = require(‘gulp-rename’);&lt;/p&gt;

&lt;p&gt;//lint task&lt;br /&gt;
gulp.task(‘jshint’,function(){
    gulp.src(‘./js/*.js’)
    .pipe(jshint())
    .pipe(jshint.reporter(‘default’));
});&lt;/p&gt;

&lt;p&gt;//conpile sass&lt;br /&gt;
gulp.task(‘sass’,function(){
    gulp.src(‘./scss/*.scss’)
    .pipe(sass())
    .pipe(gulp.dest(‘./css’));
});  &lt;/p&gt;

&lt;p&gt;//concat, minify &lt;br /&gt;
gulp.task(‘scripts’,function(){
    gulp.src(‘./js/*/js’)
    .pipe(concat(‘all.js’))
    .pipe(gulp.dest(‘./dist’))
    .pipe(rename(‘all.min.js’))
    .pipe(uglify())
    .pipe(gulp.dest(‘./dist’));
});  &lt;/p&gt;

&lt;p&gt;//default &lt;br /&gt;
gulp.task(‘default’,function(){
    gulp.run(‘lint’,’sass’,’scripts’);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.watch(&#39;./js/*.js&#39;,function(){
    gulp.run(&#39;lint&#39;,&#39;scripts&#39;);0
});
   
gulp.watch(&#39;./scss/*.scss&#39;,function(){
    gulp.run(&#39;sass&#39;);
}); }); ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gulp’s syntax is just like node, and it use streamming&lt;/p&gt;
</description>
                <link>http://lefttree.github.io/frontend/2015/06/12/gulp-setup</link>
                <guid>http://lefttree.github.io/frontend/2015/06/12/gulp-setup</guid>
                <pubDate>Fri, 12 Jun 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>Git commit style</title>
                <description>&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;
&lt;p&gt;i
```
type: subject&lt;/p&gt;

&lt;p&gt;body&lt;/p&gt;

&lt;p&gt;footer
```&lt;/p&gt;

&lt;p&gt;type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;feat&lt;/strong&gt;(new feature)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt;(bug fix)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt;(changes to doc)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;style&lt;/strong&gt;(formatting, missing semi colons, etc; no code change)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;refactor&lt;/strong&gt;(refactoring production code)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;(adding missing tests, refactoring tests, no production code change)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;chore&lt;/strong&gt;(updating grunt tasks etc; no production code change)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;```
feat: Summarize changes in around 50 characters or less&lt;/p&gt;

&lt;p&gt;More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;shortlog&lt;/code&gt;
and &lt;code&gt;rebase&lt;/code&gt; can get confused if you run the two together.&lt;/p&gt;

&lt;p&gt;Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here’s the place to explain them.&lt;/p&gt;

&lt;p&gt;Further paragraphs come after blank lines.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bullet points are okay, too&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Typically a hyphen or asterisk is used for the bullet, preceded
by a single space, with blank lines in between, but conventions
vary here&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use an issue tracker, put references to them at the bottom,
like this:&lt;/p&gt;

&lt;p&gt;Resolves: #123
See also: #456, #789
```&lt;/p&gt;
</description>
                <link>http://lefttree.github.io/programming%20style/2015/06/07/git-commit-style</link>
                <guid>http://lefttree.github.io/programming%20style/2015/06/07/git-commit-style</guid>
                <pubDate>Sun, 07 Jun 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>HTML5 Storage &amp; Cache</title>
                <description>&lt;p&gt;&lt;a href=&quot;http://slides.html5rocks.com/&quot;&gt;HTML5 Rocks Slide&lt;/a&gt;
&lt;a href=&quot;diveintohtml5.info&quot;&gt;Dive into HTML5&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;offlinestorage&quot;&gt;Offline/Storage&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
// use localStorage for persistent storage
// use sessionStorage for per tab storage
saveButton.addEventListener(&#39;click&#39;, function () {
  window.localStorage.setItem(&#39;value&#39;, area.value);
  window.localStorage.setItem(&#39;timestamp&#39;, (new Date()).getTime());
}, false);
textarea.value = window.localStorage.getItem(&#39;value&#39;);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you can use Modernizr to detect support for HTML5 Storage.&lt;/p&gt;

&lt;p&gt;```
if (Modernizr.localstorage) {
  // window.localStorage is available!
} else {
  // no native support for HTML5 storage :(
  // maybe try dojox.storage or a third-party solution
}&lt;/p&gt;

&lt;p&gt;```
&amp;gt;The data is actually stored as a string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setItem()&lt;/code&gt; and &lt;code&gt;getItem()&lt;/code&gt;
&lt;code&gt;removeItem()&lt;/code&gt; and &lt;code&gt;clear()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Track when storage changes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
if (window.addEventListener) {
  window.addEventListener(&quot;storage&quot;, handle_storage, false);
} else {
  window.attachEvent(&quot;onstorage&quot;, handle_storage);
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;“5 megabytes” is how much storage space each origin gets by default.&lt;/p&gt;

&lt;h3 id=&quot;web-sql-database&quot;&gt;Web SQL Database&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
var db = window.openDatabase(&quot;DBName&quot;, &quot;1.0&quot;, &quot;description&quot;, 5*1024*1024); //5MB
db.transaction(function(tx) {
  tx.executeSql(&quot;SELECT * FROM test&quot;, [], successCallback, errorCallback);
});
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;indexeddb&quot;&gt;IndexedDB&lt;/h3&gt;

&lt;p&gt;Act like a dictionary to me
&amp;gt;the example is not complete&lt;/p&gt;

&lt;h3 id=&quot;application-cache&quot;&gt;Application Cache&lt;/h3&gt;

&lt;p&gt;The home page of the offline web application points to this list, called a manifest file, which is just a text file located elsewhere on the web server. 
A web browser that implements HTML5 offline applications will read the list of URLs from the manifest file, download the resources, cache them locally, and automatically keep the local copies up to date as they change. When the time comes that you try to access the web application without a network connection, your web browser will automatically switch over to the local copies instead.&lt;/p&gt;

&lt;p&gt;An offline web application revolves around a cache manifest file. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;lt;html manifest=&quot;cache.manifest&quot;&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
window.applicationCache.addEventListener(&#39;updateready&#39;, function(e) {
  if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
    window.applicationCache.swapCache();
    if (confirm(&#39;A new version of this site is available. Load it?&#39;)) {
      window.location.reload();
    }
  }
}, false);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;```
CACHE MANIFEST
# version 1.0.0&lt;/p&gt;

&lt;p&gt;CACHE:
/html5/src/logic.js
/html5/src/style.css
/html5/src/background.png&lt;/p&gt;

&lt;p&gt;NETWORK:
*
```&lt;/p&gt;

&lt;p&gt;Your cache manifest file can be located anywhere on your web server, but it must be served with the content type &lt;strong&gt;text/cache-manifest&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every page of your web application needs a manifest attribute that points to the cache manifest for the entire application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;manifest-file&quot;&gt;manifest file&lt;/h4&gt;

&lt;p&gt;Divided into three parts: the “explicit” section, the “fallback” section, and the “online whitelist” section. If no section headers, default in the “explicit” section&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If multipage, should list all HTML pages in the manifest file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;network-sections&quot;&gt;Network Sections&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
CACHE MANIFEST
NETWORK:
/tracking.cgi
CACHE:
/clock.css
/clock.js
/clock-face.jpg
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NETWORK: the beginning of the “online whitelist” section, resources in this section are never cached and are not avaiable offline
CACHE: the beginning of the “explicit” section&lt;/p&gt;

&lt;h5 id=&quot;fallback-sections&quot;&gt;Fallback Sections&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
CACHE MANIFEST
FALLBACK:
/ /offline.html
NETWORK:
*
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is important. It means that you can have an offline web application that “lazily” adds pages as you visit them. You don’t need to list every single one of your HTML pages in your cache manifest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The single character (/) will match any page on your site, not just the home page. &lt;/p&gt;

&lt;p&gt;If your browser doesn’t find the page in the appcache, instead of displaying an error message, it will display the page /offline.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Is this example complete? No. Wikipedia is more than HTML files. It uses common CSS, JavaScript, and images on each page. Each of these resources would need to be listed explicitly in the CACHE: section of the manifest file, in order for pages to display and behave properly offline.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;windowapplicationcache&quot;&gt;window.applicationCache&lt;/h5&gt;

&lt;p&gt;Events:
* downloading
* progress
* cached
* noupdate
* updateready
* error&lt;/p&gt;

&lt;h5 id=&quot;developing--debugging&quot;&gt;Developing &amp;amp; Debugging&lt;/h5&gt;

&lt;p&gt;how your browser checks whether a cache manifest file has changed. 
&lt;strong&gt;3-phase process&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Via normal HTTP semantics, your browser will check whether the cache manifest has expired. 
Just like any other file being served over HTTP, your &lt;strong&gt;web server&lt;/strong&gt; will typically include &lt;strong&gt;meta-information&lt;/strong&gt; about the file in the HTTP response headers. Some of these HTTP headers (Expires and Cache-Control) tell your browser how it is allowed to cache the file without ever asking the server whether it has changed. &lt;/li&gt;
  &lt;li&gt;If the cache manifest has expired (according to its HTTP headers), then your browser will ask the server &lt;strong&gt;whether there is a new version, and if so, the browser will download it&lt;/strong&gt;. To do this, your browser issues an HTTP request that includes that &lt;strong&gt;last-modified date&lt;/strong&gt; of the cache manifest, which your web server included in the HTTP response headers the last time your browser downloaded the manifest file. If the web server determines that the manifest file hasn’t changed since that date, it will simply return a 304 (Not Modified) status. &lt;/li&gt;
  &lt;li&gt;If the web server thinks the manifest file has changed since that date, it will return an HTTP 200 (OK) status code, followed by the contents of the new file, along with new Cache-Control headers and a new last-modified date, so that steps 1 and 2 will work properly the next time. (HTTP is cool; web servers are always planning for the future. If your web server absolutely must send you a file, it does everything it can to ensure that it doesn’t need to send it twice for no reason.) &lt;strong&gt;Once it’s downloaded the new cache manifest file, your browser will check the contents against the copy it downloaded last time.&lt;/strong&gt; If the contents of the cache manifest file are the same as they were last time, your browser won’t re-download any of the resources listed in the manifest.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Debug&lt;/strong&gt;
Step 1:
So here’s one thing you should absolutely do: reconfigure your web server so that your cache manifest file is not cacheable by HTTP semantics.
&amp;gt;you should either qualify this with a &lt;files&gt; directive so it only affects your cache manifest file, or create a subdirectory that contains nothing but this .htaccess file and your cache manifest file.&lt;/files&gt;&lt;/p&gt;

&lt;p&gt;Step 2:
The easiest way I’ve found to accomplish this is to include a comment line with a revision number.
&lt;code&gt;
CACHE MANIFEST
# rev 43
clock.js
clock.css
&lt;/code&gt;&lt;/p&gt;

</description>
                <link>http://lefttree.github.io/web/2015/06/04/HTML5-Storage-Cache</link>
                <guid>http://lefttree.github.io/web/2015/06/04/HTML5-Storage-Cache</guid>
                <pubDate>Thu, 04 Jun 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>Javascript Best Practices</title>
                <description>&lt;h3 id=&quot;easy-short--readable-names&quot;&gt;Easy, Short &amp;amp; Readable Names&lt;/h3&gt;

&lt;h4 id=&quot;variables-name&quot;&gt;Variables Name&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Hungarian notation&lt;/strong&gt; is a good variable name scheme to adopt.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;typeName&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Examples:
- bBusy : boolean
- chInitial : char
- cApples : count of items&lt;/p&gt;

&lt;h4 id=&quot;function-name&quot;&gt;Function Name&lt;/h4&gt;
&lt;p&gt;Function name should start with a lowercase verb following &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;verbSomething&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Examples:
- isOldEnough()
- getResult()&lt;/p&gt;

&lt;h4 id=&quot;class-name&quot;&gt;Class Name&lt;/h4&gt;
&lt;p&gt;the first char should be capital
Examples:
- Apple()
- Node()&lt;/p&gt;

&lt;h3 id=&quot;avoid-global&quot;&gt;Avoid Global&lt;/h3&gt;

&lt;h4 id=&quot;revealing-module-pattern&quot;&gt;revealing module pattern&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;
myNameSpace = function(){
    var current = null;
    function init(){};
    function change(){};
    function verify(){};
    return{
        init: init,
        change: change
    }
}();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you don’t need any of your vars or functions to be avaiable to the outside, simply wrap the whole construct in another set of parentheses to execute it without assigning any name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
(function(){
    var current = null;
    function init(){}
})();
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-strict&quot;&gt;Use strict&lt;/h3&gt;

&lt;p&gt;Check code quality with JSLint&lt;/p&gt;

&lt;h3 id=&quot;comment&quot;&gt;Comment&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment as much as needed but no more&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use /* */&lt;/p&gt;

&lt;h3 id=&quot;avoid-mixing-with-css&quot;&gt;Avoid mixing with css&lt;/h3&gt;

&lt;h3 id=&quot;use-shortcut-notation&quot;&gt;Use Shortcut Notation&lt;/h3&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var direction = ( x &amp;gt; 100 ) ? 1 : -1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var x = v || 10;
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;this would automatically give x a value of 10 if v is not defined&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;modularize---one-function-per-task&quot;&gt;Modularize - One Function per Task&lt;/h3&gt;

&lt;h3 id=&quot;configuration-and-translation&quot;&gt;Configuration and Translation&lt;/h3&gt;

&lt;p&gt;One of the most successful tips to keep your code maintainable and clean is to create a configuration object that contains all the things that are likely to change over time.&lt;/p&gt;

&lt;p&gt;These include &lt;em&gt;any text used in elements you create&lt;/em&gt;, &lt;em&gt;CSS class&lt;/em&gt;, &lt;em&gt;ID names&lt;/em&gt; and &lt;em&gt;general parameters of the interface you build&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Examples: easy youtube player project config object&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
/*
  This is the configuration of the player.meng Most likely you will
  never have to change anything here, but it is good to be able 
  to, isn&#39;t it? 
*/
config = {
  CSS:{
    /* 
      IDs used in the document. The script will get access to 
      the different elements of the player with these IDs, so 
      if you change them in the HTML below, make sure to also 
      change the name here!
    */
    IDs:{
      container:&#39;eytp-maincontainer&#39;,
      canvas:&#39;eytp-playercanvas&#39;,
      player:&#39;eytp-player&#39;,
      controls:&#39;eytp-controls&#39;,
      volumeField:&#39;eytp-volume&#39;,
      volumeBar:&#39;eytp-volumebar&#39;,
      playerForm:&#39;eytp-playerform&#39;,
      urlField:&#39;eytp-url&#39;,
      sizeControl:&#39;eytp-sizecontrol&#39;,
      searchField:&#39;eytp-searchfield&#39;,
      searchForm:&#39;eytp-search&#39;,
      searchOutput:&#39;eytp-searchoutput&#39;
    },
    /*
      These are the names of the CSS classes, the player adds
      dynamically to the volume bar in certain 
      situations.
    */
    classes:{
      maxvolume:&#39;maxed&#39;,
      disabled:&#39;disabled&#39;
    }
  },
  /* 
    That is the end of the CSS definitions, from here on 
    you can change settings of the player itself. 
  */
  application:{
    /*
      The YouTube API base URL. This changed during development of this,
      so I thought it useful to make it a parameter.
    */
    youtubeAPI:&#39;http://gdata.youtube.com/apiplayer/cl.swf&#39;,
    /* 
      The YouTube Developer key,
      please replace this with your own when you host the player!!!!!
    */
    devkey:&#39;AI39si7d...Y9fu_cQ&#39;,
    /*
      The volume increase/decrease in percent and the volume message 
      shown in a hidden form field (for screen readers). The $x in the 
      message will be replaced with the real value.
    */
    volumeChange:10,
    volumeMessage:&#39;volume $x percent&#39;,
    /*
      Amount of search results and the error message should there 
      be no results.
    */
    searchResults:6,
    loadingMessage:&#39;Searching, please wait&#39;,
    noVideosFoundMessage:&#39;No videos found : (&#39;,
    /*
      Amount of seconds to repeat when the user hits the rewind 
      button.
    */
    secondsToRepeat:10,
    /*
      Movie dimensions.
    */
    movieWidth:400,
    movieHeight:300
  }  
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;avoid-heavy-nesting&quot;&gt;Avoid Heavy Nesting&lt;/h3&gt;

&lt;p&gt;Use functions to avoid it&lt;/p&gt;

&lt;h3 id=&quot;optimize-loops&quot;&gt;Optimize Loops&lt;/h3&gt;

&lt;h4 id=&quot;for-loop-read-length-everytime&quot;&gt;For loop read length everytime&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;
var names = [&#39;George&#39;,&#39;Ringo&#39;,&#39;Paul&#39;,&#39;John&#39;];
for(var i=0;i &amp;lt; names.length;i++){
  doSomeThingWith(names[i]);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To Fix&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var names = [&#39;George&#39;,&#39;Ringo&#39;,&#39;Paul&#39;,&#39;John&#39;];
for(var i=0,j=names.length;i &amp;lt; j;i++){
  doSomeThingWith(names[i]);
}
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;keep-computation-heavy-code-outside&quot;&gt;Keep computation-heavy code outside&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;regular expression&lt;/li&gt;
  &lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;keep-dom-access-to-a-minimum&quot;&gt;Keep DOM Access to a minimum&lt;/h3&gt;

&lt;h3 id=&quot;do-not-trust-any-data&quot;&gt;Do not Trust Any Data&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;It is very important to tes the type of parameters send to your functions(using the &lt;code&gt;typeof&lt;/code&gt; keyword)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
function buildMemberList(members){
  if(typeof members === &#39;object&#39; &amp;amp;&amp;amp; 
     typeof members.slice === &#39;function&#39;){
    var all = members.length;
    var ul = document.createElement(&#39;ul&#39;);
    for(var i=0;i &amp;lt; all;i++){
      var li = document.createElement(&#39;li&#39;);
      li.appendChild(document.createTextNode(members[i].name));
      ul.appendChild(li);
    }
    return ul;
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compare and check info read from the DOM&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;do-not-create-too-much-with-javascript&quot;&gt;Do not create too much with Javascript&lt;/h3&gt;

&lt;p&gt;Using an HTML template and load it via AJAX&lt;/p&gt;

&lt;h3 id=&quot;do-not-use-new-object&quot;&gt;Do not Use New Object&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Use {} instead of new Object()&lt;/li&gt;
  &lt;li&gt;Use “” instead of new String()&lt;/li&gt;
  &lt;li&gt;Use 0 instead of new Number()&lt;/li&gt;
  &lt;li&gt;Use false instead of new Boolean()&lt;/li&gt;
  &lt;li&gt;Use [] instead of new Array()&lt;/li&gt;
  &lt;li&gt;Use /()/ instead of new RegExp()&lt;/li&gt;
  &lt;li&gt;Use function (){} instead of new function()&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://lefttree.github.io/programming%20style/2015/06/03/JS-Best-Practices</link>
                <guid>http://lefttree.github.io/programming%20style/2015/06/03/JS-Best-Practices</guid>
                <pubDate>Wed, 03 Jun 2015 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>Javascript Good Parts</title>
                <description>&lt;h2 id=&quot;part-1-good-parts&quot;&gt;Part 1 Good Parts&lt;/h2&gt;
&lt;p&gt;Javascript is getting more and more popular now&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Good Parts:
	- function
	- loose typing
	- dynamic objects
	- object literal notation
Bad Parts:
	- Global variables(&lt;strong&gt;They are evil!&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;part-2-grammar&quot;&gt;Part 2 Grammar&lt;/h2&gt;
&lt;p&gt;###Comment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- //  (recommended)
- /* */  (Not safe because it can occur in regex)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;number&quot;&gt;Number&lt;/h3&gt;

&lt;p&gt;JS only has a single number type. Internally, it is a 64-bit floating point. So 1 and 1.0 are the same value.
isNaN() function to detect NaN.&lt;/p&gt;

&lt;h3 id=&quot;strings&quot;&gt;Strings&lt;/h3&gt;

&lt;p&gt;All characters are 16 bits wide. Immutable.&lt;/p&gt;

&lt;h2 id=&quot;part-3-objects&quot;&gt;Part 3 Objects&lt;/h2&gt;
&lt;p&gt;###JS types&lt;/p&gt;

&lt;p&gt;Immutable
	- Number
	- String
	- boolean
null
undefined&lt;/p&gt;

&lt;p&gt;objects
	- property, can be any string, including &lt;strong&gt;empty string&lt;/strong&gt;
	- value, can be any JS value except &lt;strong&gt;undefined&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;retrieval&quot;&gt;Retrieval&lt;/h3&gt;

&lt;p&gt;retrieve a nonexistent member&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
flight.status // undefined
&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;The&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;operator can be used to fill in default values:&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;javascript
var middle = stooge[&quot;middle-name&quot;] || &quot;(none)&quot;;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Attempting to retrieve valus from &lt;strong&gt;undefined&lt;/strong&gt; will throw a &lt;strong&gt;TypeError&lt;/strong&gt; exception. Can be guarded against with &amp;amp;&amp;amp; operator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
flight.equipment &amp;amp;&amp;amp; flight.equipment.model
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;p&gt;Objects are passed around by reference. They are &lt;strong&gt;never copied&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
    var x = another_x;
    x.nickname = &quot;nick&quot;;
    var name = another_x.nickname;
    // name is &quot;nick&quot; because x and another_x are references to the same obj
&lt;/code&gt;&lt;br /&gt;
Initialization&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
    var a = {}, b = {}, c = {}; //a, b and c are differenct obj
	var a = b = c = {}; //a, b and c refer to the same empty obj
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;prototype&quot;&gt;Prototype&lt;/h3&gt;
&lt;p&gt;The prototype link is used only in retrieval, has no effect on updating.
When retrieve a property, it would search the prototype link.&lt;/p&gt;

&lt;h3 id=&quot;reflection&quot;&gt;Reflection&lt;/h3&gt;
&lt;p&gt;typeof 
&amp;gt; &lt;strong&gt;Note:&lt;/strong&gt;
&amp;gt; any property on the protorype chain can produce a value&lt;/p&gt;

&lt;p&gt;hasOwnProperty
	- it does not look at the prototype chain&lt;/p&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;
&lt;p&gt;the &lt;strong&gt;for in&lt;/strong&gt; statement can loop over all the property names in an obj. It will include all properties – including functions and prototypes properties. So it is necessary to &lt;strong&gt;filter&lt;/strong&gt; out the values.
	- hasOwnProperty
	- typeof &lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
	var name;
	for(name in another_stooge){
		if(typeof(another_stooge[name]) !== &#39;function&#39;){
			document.writeln(name + &#39;: &#39; + another_stooge[name]);
		}
	}
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
There is no guarantee on the order of properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;delete&quot;&gt;Delete&lt;/h3&gt;
&lt;p&gt;It will remove a property from the object &lt;strong&gt;if it has one&lt;/strong&gt;. It will &lt;strong&gt;not&lt;/strong&gt; touch any  of the objects in the prototype linkage.&lt;/p&gt;

&lt;h3 id=&quot;global-abatement&quot;&gt;Global Abatement&lt;/h3&gt;
&lt;p&gt;Avoid global variable. Skip this part, use module pattern.&lt;/p&gt;
</description>
                <link>http://lefttree.github.io/web/2015/06/01/Javascript-theGoodParts</link>
                <guid>http://lefttree.github.io/web/2015/06/01/Javascript-theGoodParts</guid>
                <pubDate>Mon, 01 Jun 2015 00:00:00 -0700</pubDate>
        </item>


</channel>
</rss>
